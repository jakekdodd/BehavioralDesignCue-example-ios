//
//  BoundlessKit.swift
//  BoundlessKit
//
//  Created by Akash Desai on 4/7/16.
//  Copyright Â© 2018 Boundless Mind. All rights reserved.
//

import Foundation

open class BoundlessKit: NSObject {
    internal static var _shared: BoundlessKit?

    @objc
    open class var shared: BoundlessKit {
        guard _shared == nil else {
            return _shared!
        }
        _shared = BoundlessKit()
        return _shared!
    }

    internal let apiClient: BoundlessAPIClient

    internal init(apiClient: BoundlessAPIClient) {
        self.apiClient = apiClient
        super.init()
    }

    internal override convenience init() {
        guard let properties = BoundlessProperties.fromFile(using: BKUserDefaults.standard) else {
            fatalError("Missing <BoundlessProperties.plist> file")
        }
        self.init(apiClient: BoundlessAPIClient(properties: properties))
    }

    @objc
    open func track(actionID: String, metadata: [String: Any]) {
        let action = BKAction(actionID, metadata)
        apiClient.commit(action)
        apiClient.synchronize()
    }

    @objc
    open func reinforce(actionID: String, metadata: [String: Any], completion: @escaping (String) -> Void) {
        let decision = apiClient.remove(decisionFor: actionID)
        let reinforcement = BKReinforcement(decision, metadata)
        DispatchQueue.main.async {
            completion(reinforcement.name)
        }
        apiClient.commit(reinforcement)
        apiClient.synchronize()
    }
}

extension BoundlessKit {
    @objc
    open func track(actionID: String) {
        track(actionID: actionID, metadata: [:])
    }

    @objc
    open func reinforce(actionID: String, completion: @escaping (String) -> Void) {
        reinforce(actionID: actionID, metadata: [:], completion: completion)
    }
}

extension BoundlessKit {
    /// Set a custom identity for Boundless
    ///
    /// - Parameters:
    ///   - id: A non-empty string that is less than 36 characters, containing only alphanumerics and dashes. If an invalid string is passed, one will be genereated using the UUID class.
    ///   - completion: An optional callback taking the most recent user id and user's experiment group
    @objc
    open func setCustomUserId(_ id: String?, completion: ((String?, String?) -> Void)? = nil) {
        apiClient.set(customUserIdentifier: id, completion: completion)
    }

    /// Get the user identifier used within the Boundless environment.
    ///
    /// You can change the identifier source in `BoundlessProperties.plist`. Set the key `userIdSource` to `idfv`, `idfa`, `default` or `custom`.
    /// - idfv: Identifier for vendor
    /// - idfa: Identifier for advertiser
    /// - default: Identifier generated by UUID class
    /// - custom: Identifier that is manually set
    ///
    /// - Returns:
    /// The identifier string, or nil if one has not been.
    /// An identifier is not set automatically if `userIdSource` is set to `custom`, and BoundlessKit.shared.setCustomUserId() has not yet been called.
    @objc
    open func getUserId() -> String? {
        return apiClient.credentials.user.id
    }

    @objc
    open func getUserExperimentGroup() -> String? {
        return apiClient.credentials.user.experimentGroup
    }
}
